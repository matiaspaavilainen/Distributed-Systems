apiVersion: v1
kind: ServiceAccount
metadata:
    name: kafka-labeler
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    name: node-labeler
rules:
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list", "patch"]
    - apiGroups: [""]
      resources: ["pods"] # Add pod permissions
      verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: kafka-node-labeler
subjects:
    - kind: ServiceAccount
      name: kafka-labeler
      namespace: default
roleRef:
    kind: ClusterRole
    name: node-labeler
    apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: kafka
    labels:
        app: kafka
spec:
    serviceName: kafka
    replicas: 4 # 3 workers + 1 control plane
    selector:
        matchLabels:
            app: kafka
    template:
        metadata:
            labels:
                app: kafka
        spec:
            serviceAccountName: kafka-labeler
            initContainers:
                - name: node-labeler
                  image: bitnami/kubectl
                  command:
                      - /bin/sh
                      - -c
                      - |
                          POD_NAME=$(hostname)
                          NODE=$(kubectl get pod $POD_NAME -n default -o=jsonpath='{.spec.nodeName}')
                          ORDINAL=${POD_NAME##*-}  # Extract number from pod name
                          echo "Labeling node $NODE with kafka-ordinal=kafka-$ORDINAL"
                          kubectl label node $NODE kafka-ordinal=kafka-$ORDINAL --overwrite
                  env:
                      - name: POD_NAME
                        valueFrom:
                            fieldRef:
                                fieldPath: metadata.name
            affinity:
                nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                        nodeSelectorTerms:
                            - matchExpressions: # For kafka-0 on control plane
                                  - key: node-role.kubernetes.io/control-plane
                                    operator: Exists
                            - matchExpressions: # For kafka-1 through kafka-3 on workers
                                  - key: node-role.kubernetes.io/worker
                                    operator: Exists
            containers:
                - name: kafka
                  image: bitnami/kafka:latest
                  ports:
                      - containerPort: 9092
                  env:
                      - name: POD_NAME
                        valueFrom:
                            fieldRef:
                                fieldPath: metadata.name
                      - name: KAFKA_CFG_ZOOKEEPER_CONNECT
                        value: "zookeeper:2181"
                      - name: ALLOW_PLAINTEXT_LISTENER
                        value: "yes"
                      - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
                        value: "INTERNAL:PLAINTEXT"
                      - name: KAFKA_CFG_LISTENERS
                        value: "INTERNAL://0.0.0.0:9092"
                      - name: KAFKA_CFG_ADVERTISED_LISTENERS
                        value: "INTERNAL://$(POD_NAME).kafka:9092"
                      - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
                        value: "INTERNAL"
---
apiVersion: v1
kind: Service
metadata:
    name: kafka
spec:
    clusterIP: None # Headless service
    selector:
        app: kafka
    ports:
        - port: 9092
          targetPort: 9092
